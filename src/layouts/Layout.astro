---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Bookkeeping for Connecticut Artists & Creatives | ACE Accountable" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} | ACE Accountable</title>
    
    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/og-image.jpg" />
    
    <!-- Performance hints -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Global CSS -->
    <link rel="stylesheet" href="/src/styles/global.css" />
  </head>
  <body>
    <!-- Noise texture overlay for premium feel -->
    <div class="fixed inset-0 pointer-events-none noise-overlay z-50"></div>
    
    <!-- Main content -->
    <slot />
    
    <script>
      // Premium scroll reveal animation
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('active');
          }
        });
      }, observerOptions);
      
      document.addEventListener('DOMContentLoaded', () => {
        const reveals = document.querySelectorAll('.reveal');
        reveals.forEach(el => observer.observe(el));
        
        // Smooth scroll for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
              target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
          });
        });
      });
      
      // Premium mouse follower effect (subtle)
      let mouseX = 0;
      let mouseY = 0;
      
      document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
        
        const elements = document.querySelectorAll('.float-element');
        elements.forEach((el, index) => {
          const speed = el.dataset.speed || 0.5;
          const x = (window.innerWidth - mouseX * speed) / 100;
          const y = (window.innerHeight - mouseY * speed) / 100;
          
          el.style.transform = `translate(${x}px, ${y}px)`;
        });
      });
    </script>
  </body>
</html>